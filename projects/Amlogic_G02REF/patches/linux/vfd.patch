diff -Nur linux-95ba9d626c0fce672caa296f5911ab9190881642-avl/drivers/amlogic/vfd.bak/venus_vfd.c linux-95ba9d626c0fce672caa296f5911ab9190881642-avl/drivers/amlogic/vfd/venus_vfd.c
--- linux-95ba9d626c0fce672caa296f5911ab9190881642-avl/drivers/amlogic/vfd.bak/venus_vfd.c	2018-03-21 06:58:27.000000000 +0100
+++ linux-95ba9d626c0fce672caa296f5911ab9190881642-avl/drivers/amlogic/vfd/venus_vfd.c	2019-03-03 02:39:28.396865387 +0100
@@ -22,7 +22,6 @@
 #include <asm/uaccess.h>
 #include <asm/byteorder.h>
 #include <asm/dma.h>
-//#include <asm/io.h>
 #include <linux/ioctl.h>
 #include <asm/irq.h>
 #include <asm/system.h>
@@ -39,333 +38,449 @@
 
 #include <mach/gpio.h>
 #include <linux/gpio.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
 #include <linux/pm.h>
 
-//#include "keyled_sm1628.h"
 #include "venus_vfd.h"
 
-void keyled_gpio_dirset(void)
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+static struct early_suspend vfd_early_suspend;
+#endif
+
+static int tm1628_gpio_set(void)
+{
+	int ret=0;
+	
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	
+	ret=gpio_direction_output(LED_CLK,0);
+	//printk(KERN_DEBUG "[VFD] %s: LED_CLK=%d on=0 ret=%d\n", __func__, LED_CLK, ret);
+	
+	ret=gpio_direction_output(LED_DAT,0);
+	//printk(KERN_DEBUG "[VFD] %s: LED_DAT=%d on=0 ret=%d\n", __func__, LED_DAT, ret);
+	
+	ret=gpio_direction_output(LED_STB,0);
+	//printk(KERN_DEBUG "[VFD] %s: LED_STB=%d on=0 ret=%d\n", __func__, LED_STB, ret);
+	
+	return ret;
+}
+ 
+static void tm1628_tx_byte(u_int8 data) 
 {
-//    hi_gpio_dirset_bit(GROUP, CLK, 0);  //output
-//    hi_gpio_dirset_bit(GROUP, DAT, 0);  //output
- //   hi_gpio_dirset_bit(GROUP, KEY, 1);  //input
-//    hi_gpio_dirset_bit(GROUP, STB, 0);  //output
- //   hi_gpio_dirset_bit(GROUP, LED, 0);  //output
-        gpio_direction_output(LED_CLK,0);
-        gpio_direction_output(LED_DAT,0);
-	 gpio_direction_output(LED_STB,0);
-}
-
-void keyled_sm1628_tx_byte(HI_U8 val) 
-{
-	HI_U8 i = 0;
-	HI_U8 tmp = val;
-	//hi_gpio_dirset_bit(GROUP, DAT, 0);
-	gpio_direction_output(LED_DAT,0);
-	GPIO_DATA_SET(0);
+	//printk(KERN_DEBUG "[VFD] %s data=%d\n", __func__, data);
+	
+	u_int8 i = 0;
+	
+	GPIO_CLK_SET(1);
+	tm1628_udelay(2);
+	
 	for (i = 0; i < 8; i++)
 	{
-		GPIO_CLOCK_SET(0);
-		GPIO_DATA_SET(tmp & 0x1);
-		tmp = (tmp >> 1);
-		GPIO_CLOCK_SET(1);
+		tm1628_udelay(2);
+		GPIO_CLK_SET(0);
+		tm1628_udelay(3);
+		
+		if(data&0x01)
+			GPIO_DATA_SET(1);
+		else
+			GPIO_DATA_SET(0);
+		
+		tm1628_udelay(5);
+		GPIO_CLK_SET(1);
+		data >>= 1;
 	}
+	tm1628_udelay(3);
 }
 
-void keyled_sm1628_write(HI_U8 val) 
-{    
-	/*send single command byte*/ 
-	GPIO_STB_SET(0);
-	keyled_sm1628_tx_byte(val);
+static void tm1628_write_cmd(u_int8 cmd)
+{
 	GPIO_STB_SET(1);
-	return;
+	tm1628_udelay(3);
+	GPIO_STB_SET(0);
+	tm1628_udelay(3);
+	tm1628_tx_byte(cmd);
 }
 
-void keyled_sm1628_led_update(void) 
+static void tm1628_write_data(u_int8 data) 
 {
-	HI_U8 i = 0;
-	/*command 1:set display mode */ 
-	keyled_sm1628_write(CMD1_DIP_OFF);	
-	keyled_sm1628_write(CMD1_DISP_MODE_1);
-	/*command 2:set write command  */ 
-	keyled_sm1628_write(CMD1_LED_WRITE_INC);
-	/*command 3:set the initialization address and send data */
 	GPIO_STB_SET(0);
-	keyled_sm1628_tx_byte(CMD1_LED_ADDR_BASE);
-	for (i = 0; i < SM1628_DISPLAY_REG_NUM; i++)
-	{
-		keyled_sm1628_tx_byte(v_LedCode[i]);
-	}
+	tm1628_udelay(3);
+	tm1628_tx_byte(data);
+	tm1628_udelay(3);
 	GPIO_STB_SET(1);
-	//command 4 :open LED display control
-	keyled_sm1628_write(CMD1_DIP_ON);	
 }
 
-HI_S32 keyled_init(void)
+static u_int8 tm1628_brightness = 0;
+
+static void tm1628_set_brightness(void)
 {
-	//printk(KERN_INFO "keyled_init() is called!\n");
+	//printk(KERN_DEBUG "[VFD] %s(%d)\n", __func__, tm1628_brightness);
+	
+	if (tm1628_brightness < 0)
+	{
+		tm1628_write_cmd(CMD1_DIP_OFF); // command 4
+		return;
+	}
+	tm1628_write_cmd(0x88 | (tm1628_brightness % 8)); // command 4
+}
 
-	//HI_REG_WRITE(IO_ADDRESS(0x10203000 + 0x78), 0);  //5_2
-	//HI_REG_WRITE(IO_ADDRESS(0x10203000 + 0x7c), 0);  //5_3
-	//HI_REG_WRITE(IO_ADDRESS(0x10203000 + 0x80), 0);  //5_4
-	//HI_REG_WRITE(IO_ADDRESS(0x10203000 + 0x84), 0);  //5_5
-	//HI_REG_WRITE(IO_ADDRESS(0x10203000 + 0x88), 0);  //5_6
-	keyled_gpio_dirset();
-	return HI_SUCCESS;
+static void tm1628_unlocked_set_power(u_int8 state)
+{
+	//printk(KERN_DEBUG "[VFD] %s state=%d\n", __func__, state);
+	
+	if(state)
+		tm1628_set_brightness();
+	else
+		tm1628_write_cmd(CMD1_DIP_OFF);
 }
 
-void sm1628_led(bool i)
-{	//if i=0 , led blue  else led red ;
-	//hi_gpio_dirset_bit(GROUP, LED, 0);  //output
-	//GPIO_LED_SET(i);
+static void tm1628_set_power(u_int8 state)
+{
+	mutex_lock(&mutex);
+	tm1628_unlocked_set_power(state);
+	mutex_unlock(&mutex);
 }
 
-void no_display_usr(void)
+static void tm1628_update_display(TM1628_VFD data)
 {
-	int i;
-	keyled_init();
-	for(i=0;i<14;(i+=2)){
-		v_LedCode[i] = 0x0;
-	}
-	keyled_sm1628_led_update();
+	tm1628_unlocked_set_power(0);
+	tm1628_write_cmd(CMD1_DISP_MODE_1);
+	GPIO_STB_SET(1);
+	tm1628_write_cmd(0x44);
+	GPIO_STB_SET(1);
+	tm1628_write_cmd(0x82);
+	GPIO_STB_SET(1);
+	
+	//set digit 1 display
+	tm1628_write_cmd(CMD1_LED_ADDR_BASE);
+	tm1628_write_data(data.digit_0);
+	
+	//set digit 2 display
+	tm1628_write_cmd(CMD1_LED_ADDR_DIGIT_1);
+	
+	//set dot display
+	if(data.dot)
+		data.digit_1 |= 0x80;
+
+	tm1628_write_data(data.digit_1);
+	
+	//set digit 3 display
+	tm1628_write_cmd(CMD1_LED_ADDR_DIGIT_2);
+	tm1628_write_data(data.digit_2);
+	
+	//set digit 4 display
+	tm1628_write_cmd(CMD1_LED_ADDR_DIGIT_3);
+	tm1628_write_data(data.digit_3);
+	
+	GPIO_STB_SET(1);
+	
+	tm1628_unlocked_set_power(1);
 }
 
-void display_all_zero(void)
+static int tm1628_display_time(TM1628_TIME time)
 {
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
 
-	//printk(KERN_INFO "display_all_zero() is called!\n");
+	TM1628_VFD data;
+	data.digit_0 = led_key[time.hour/10];
+	data.digit_1 = led_key[time.hour%10];
+	data.digit_2 = led_key[time.minute/10];
+	data.digit_3 = led_key[time.minute%10];
+	data.dot = 0x01;
 
-	int i;
-	keyled_init();
-	for(i=0;i<12;(i+=2)){
-		v_LedCode[i] = 0x1f;
-	}
-	v_LedCode[12] = 0x0;
-	keyled_sm1628_led_update();
+	tm1628_update_display(data);
 
-	return;
+	return TM1628_SUCCESS;
 }
 
-HI_S32 display_sm1628_time(ZEKO_TIME keyled_time)
+static void tm1628_clear_display(void)
 {
-	//printk(KERN_INFO "display_sm1628_time() is called!\n");
-
-	int index = 0;
-	int i = 0;
-	int b = 0;
-	//	printk("hour=%d,min=%d,sec=%d\n",keyled_time.hour,keyled_time.minute,keyled_time.second);
-	index = keyled_time.hour%10;
-	CHANGE_Code[2] = LedDigDisDot_sm1628[index];
-
-
-	index = keyled_time.hour/10;
-	CHANGE_Code[0] = LedDigDisDot_sm1628[index];
-	index = keyled_time.hour%10;
-	CHANGE_Code[1] = LedDigDisDot_sm1628[index];
-
-	index = keyled_time.minute/10;
-	CHANGE_Code[3] = LedDigDisDot_sm1628[index];
-	index = keyled_time.minute%10;
-	CHANGE_Code[4] = LedDigDisDot_sm1628[index];
-
-	//index = keyled_time.minute/10;
-	//CHANGE_Code[0] = LedDigDisDot_sm1628[index];
-	//index = keyled_time.minute%10;
-	//CHANGE_Code[1] = LedDigDisDot_sm1628[index];
-
-	//index = keyled_time.second/10;
-	//CHANGE_Code[3] = LedDigDisDot_sm1628[index];
-	//index = keyled_time.second%10;
-	//CHANGE_Code[4] = LedDigDisDot_sm1628[index];
-	//	printk("%x,%x,%x,%x,%x\n",CHANGE_Code[0],CHANGE_Code[1],CHANGE_Code[2],CHANGE_Code[3],CHANGE_Code[4]);
-	for(i = 0 ,b = 0 ;i <7 ;i++,b++){
-		v_LedCode[i+b]=0x0;
-		for(index = 0 ;index <7 ;index ++){
-			v_LedCode[i+b] += ((CHANGE_Code[index] & (0x1<<i))>>i)<< index	;
-		}
-		//屏蔽第一个数字和：
-		v_LedCode[i+b] = v_LedCode[i+b]&0xfb;
-        if(i<3){
-           v_LedCode[i+b] = v_LedCode[i+b]&0xdf;}
-           else{
-         v_LedCode[i+b] = v_LedCode[i+b]&0xff;}
-
-	}
-	udelay_sm1628(10);
-	keyled_sm1628_led_update();
-	return HI_SUCCESS;
+	TM1628_VFD data = { 0x00, 0x00, 0x00, 0x00, 0x00 };
+	
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	
+	tm1628_update_display(data);
 }
 
+static void tm1628_display_mline(void)
+{
+	//TM1628_VFD data = { 0x5F, 0x20, 0x20, 0x5F, 0x01 };
+	//TM1628_VFD data = { 0x00, 0x00, 0x00, 0x00, 0x01 };
+	//TM1628_VFD data = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
+	TM1628_VFD data = { 0x20, 0x20, 0x20, 0x20, 0x00 }; // ----
+	
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
 
-void point_config(bool val){
-	if(val){
-		//point display
-		v_LedCode[4]|=0x20;
-		v_LedCode[8]|=0x20;
-	}else{
-		//no point display
-		v_LedCode[4]&=0xdf;
-		v_LedCode[8]&=0xdf;
-	}
+	tm1628_update_display(data);
 }
 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void vfd_suspend(struct early_suspend *h)
+{
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	tm1628_set_power(0);
+}
 
-ssize_t hi_sm1628_write(struct file *filp, const char __user *buf, size_t size, loff_t *off)
+static void vfd_resume(struct early_suspend *h)
 {
-	//printk(KERN_ERR "hi_sm1628_write() is called!\n");
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	tm1628_set_power(1);
+}
+#endif
 
-	ZEKO_TIME  zeko;
-	int ret;
-	ret=copy_from_user(&zeko, buf, sizeof(zeko));
-	display_sm1628_time(zeko);
-	return HI_SUCCESS;
+static ssize_t tm1628_write(struct file *filp, const char __user *buf, size_t count, loff_t *off)
+{
+	unsigned long missing;
+	TM1628_VFD data;
+	TM1628_TIME time;
+	
+	//printk(KERN_DEBUG "[VFD] %s count=%d\n", __func__, count);
+		
+	if (count == sizeof(data)) {
+		missing = copy_from_user(&data, buf, count);
+		if (missing == 0 && count > 0) {
+			mutex_lock(&mutex);
+			tm1628_update_display(data);
+			mutex_unlock(&mutex);
+		}
+	}
+	else {
+		missing=copy_from_user(&time, buf, sizeof(time));
+		if (missing == 0) {
+			mutex_lock(&mutex);
+			tm1628_display_time(time);
+			mutex_unlock(&mutex);
+		}
+	}
+	
+	return TM1628_SUCCESS;
 }
 
-long hi_sm_ioctl(struct file *filp, unsigned int  cmd, unsigned long arg)
+static long tm1628_ioctl(struct file *filp, unsigned int  cmd, unsigned long arg)
 {
+	int err = 0, ret = 0, val = 1, temp = 0;
+	
+	//printk(KERN_DEBUG "[VFD] %s TM1628_POWER=%d\n", __func__, TM1628_POWER);
+	//printk(KERN_DEBUG "[VFD] %s TM1628_BRIGHT=%d\n", __func__, TM1628_BRIGHT);
+	//printk(KERN_DEBUG "[VFD] %s TM1628_MLINE=%d\n", __func__, TM1628_MLINE);
+	//printk(KERN_DEBUG "[VFD] %s cmd=%d arg=%d\n", __func__, cmd, arg);
+	
+	if (_IOC_TYPE(cmd) != TM1628_MAGIC)
+		return -ENOTTY;
+	if (_IOC_NR(cmd) >= TM1628_MAXNR)
+		return -ENOTTY;
+	if (_IOC_DIR(cmd) & _IOC_READ)
+		err = !access_ok(VERIFY_WRITE, (void __user *)arg, _IOC_SIZE(cmd));
+	else if (_IOC_DIR(cmd) & _IOC_WRITE)
+		err = !access_ok(VERIFY_READ, (void __user *)arg, _IOC_SIZE(cmd));
+	if (err)
+		return -EFAULT;
 
+	mutex_lock(&mutex);
+	//printk(KERN_DEBUG "[VFD] %s mutex_lock\n", __func__, cmd);
+	
 	switch(cmd)
 	{
-		case SM1628_LIGHT_ON_ZERO :
-			display_all_zero();
-			break ;
-
-		case SM1628_LIGHT_OFF :
-			no_display_usr();
-			break ;
+		case TM1628_POWER:
+			ret = __get_user(val, (int __user *)arg);
+			//printk(KERN_DEBUG "[VFD] %s::TM1628_POWER val=%d \n", __func__, val);
+			tm1628_unlocked_set_power((u_int8)val);
+			break;
+			
+		case TM1628_MLINE:
+			//printk(KERN_DEBUG "[VFD] %s::TM1628_MLINE\n", __func__);
+			tm1628_display_mline();
+			break;
+			
+		case TM1628_BRIGHT:
+			ret = __get_user(temp, (int __user *)arg);
+			//printk(KERN_DEBUG "[VFD] %s::TM1628_BRIGHT temp=%d \n", __func__, temp);
+			if(ret){
+				//printk(KERN_DEBUG "[VFD] %s::TM1628_BRIGHT -ERANGE\n", __func__);
+				ret = -ERANGE;
+			}
+			else {
+				//printk(KERN_DEBUG "[VFD] %s::TM1628_BRIGHT tm1628_brightness=%d \n", __func__, temp);
+				tm1628_brightness = (u_int8)temp;
+				tm1628_set_brightness();
+			}
+			break;
 
 		default:
-			no_display_usr();
+			ret = -ENOTTY;
 			break;
 	}
-	return HI_SUCCESS;
+	
+	mutex_unlock(&mutex);
+	
+	//printk(KERN_DEBUG "[VFD] %s ret=%d\n", __func__, ret);
+	
+	return ret;
 }
 
-
-static const struct file_operations sm1628_fops = {
-	.owner			= THIS_MODULE ,
-	.unlocked_ioctl 	= hi_sm_ioctl ,
-	.write			= hi_sm1628_write ,
+static const struct file_operations tm1628_fops = {
+	.owner			= THIS_MODULE,
+	.unlocked_ioctl 	= tm1628_ioctl,
+	.compat_ioctl		= tm1628_ioctl,
+	.write			= tm1628_write,
 };
 
-static struct miscdevice sm1628_misc_device = {
-	.minor    = HI_SM1628_MINOR,
-	.name     = "pf_Dzeko",
-	.fops     = &sm1628_fops,
+static struct miscdevice tm1628_misc_device = {
+	.minor    = TM1628_MINOR,
+	.name     = "vfd",
+	.fops     = &tm1628_fops,
 };
 
-
-static int sm1628_keypad_probe(struct platform_device *pdev)
+static int tm1628_probe(struct platform_device *pdev)
 {
+	int ret = 0;
+	
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
 
-	//printk(KERN_ERR "sm1628_keypad_probe is called!\n");
-
-
-	int ret = misc_register(&sm1628_misc_device);
+	mutex_lock(&mutex);
+	
+	ret = misc_register(&tm1628_misc_device);
 	if (ret) {
-		printk(KERN_ERR "unable to register a misc device\n");
-		goto fail__;
-		return ret;
+		printk(KERN_DEBUG "[VFD] %s unable to register a misc device\n", __func__);
+		goto error;
 	}
-	keyled_init();
-	sm1628_led(1);
-	//printk(KERN_INFO "initialized OK\n");
-	display_all_zero();
-	//by zhangh
-	//ZEKO_TIME keyled_time1;
-//	keyled_time1.hour =2;
-//	keyled_time1.minute =30;
-//	keyled_time1.second =22;
-//	display_sm1628_time(keyled_time1);
+	ret = tm1628_gpio_set();
+	if (ret) {
+		printk(KERN_DEBUG "[VFD] %s unable to set gpio\n", __func__);
+		goto error;
+	}
+	
+	printk(KERN_DEBUG "[VFD] %s initialized OK\n", __func__);
+	
+	tm1628_unlocked_set_power(1);
+	tm1628_display_mline();
+	
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	vfd_early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN;
+	vfd_early_suspend.suspend = vfd_suspend;
+	vfd_early_suspend.resume = vfd_resume;
+	register_early_suspend(&vfd_early_suspend);
+#endif
+	mutex_unlock(&mutex);
+	
 	return 0;
-
-fail__:
-	misc_deregister(&sm1628_misc_device);
+error:
+	misc_deregister(&tm1628_misc_device);
+	mutex_unlock(&mutex);
+	
 	return -EINVAL;
 }
 
-
-static int sm1628_keypad_remove(struct platform_device *dev)
+static int tm1628_remove(struct platform_device *dev)
 {
-	misc_deregister(&sm1628_misc_device);
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	unregister_early_suspend(&vfd_early_suspend);
+#endif
+	misc_deregister(&tm1628_misc_device);
 	return 0;
 }
 
-static int sm1628_keypad_suspend(struct platform_device *dev,pm_message_t state)
+static int tm1628_suspend(struct platform_device *dev,pm_message_t state)
 {
-	keyled_init();
-	no_display_usr();
-	sm1628_led(0);
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	
+	//tm1628_gpio_set();
+	tm1628_set_power(0);
 	return 0;
 }
 
-static int sm1628_keypad_resume(struct platform_device * dev)
+static int tm1628_resume(struct platform_device * dev)
 {
-	keyled_init();
-	display_all_zero();
-	sm1628_led(1);
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	
+	//tm1628_gpio_set();
+	tm1628_set_power(1);
 	return 0;
 }
 
-static void sm1628_platform_device_release(struct device* dev){
-
+static void tm1628_shutdown(struct platform_device *dev)
+{
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	
+	//tm1628_gpio_set();
+	tm1628_clear_display();
+	tm1628_set_power(0);
 }
 
-static struct platform_driver sm1628_keypad_driver = {
-	.probe   = sm1628_keypad_probe,
-	.remove  = sm1628_keypad_remove,
-	.suspend = sm1628_keypad_suspend,
-	.resume  = sm1628_keypad_resume,
+static void tm1628_platform_device_release(struct device* dev) {}
+
+static struct platform_driver tm1628_driver = {
+	.probe   = tm1628_probe,
+	.remove  = tm1628_remove,
+	.suspend = tm1628_suspend,
+	.shutdown = tm1628_shutdown,
+	.resume  = tm1628_resume,
 	.driver  = {
-		.name  = "mv300_Dzeko_keypad",
+		.name  = "tm1628_vfd",
 		.owner = THIS_MODULE,
 	},
 };
 
-
-static struct platform_device sm1628_keypad_dev = {
-	.name = "mv300_Dzeko_keypad",
+static struct platform_device tm1628_device = {
+	.name = "tm1628_vfd",
 	.id   = -1,
 	.dev = {
 		.platform_data  = NULL,
 		.dma_mask = (u64*)~0,
 		.coherent_dma_mask = (u64)~0,
-		.release = sm1628_platform_device_release,
+		.release = tm1628_platform_device_release,
 	},
 };
 
-static int __init gpio_init(void)
+static int __init tm1628_init(void)
 {
-	int retval;
+	int ret = 0;
+	
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	
+	amlogic_gpio_request(LED_STB, __func__);
+	amlogic_gpio_request(LED_CLK, __func__);
+	amlogic_gpio_request(LED_DAT, __func__);
 
-	retval = platform_device_register(&sm1628_keypad_dev);
-	if(retval) {
-		return retval;
+	mutex_init(&mutex);
+	
+	ret = platform_device_register(&tm1628_device);
+	if(ret) {
+		return ret;
 	}
 
-	retval = platform_driver_register(&sm1628_keypad_driver);
-	if(retval) {
-		goto fail2;
+	ret = platform_driver_register(&tm1628_driver);
+	if(ret) {
+		goto error;
 	}
 
-	return retval;
+	return ret;
 
-fail2:
-	platform_device_unregister(&sm1628_keypad_dev);
+error:
+	printk(KERN_DEBUG "[VFD] %s error\n", __func__);
+	platform_device_unregister(&tm1628_device);
 	return -1;
 }
 
-static void __exit gpio_exit (void)
+static void __exit tm1628_exit(void)
 {
-	platform_driver_unregister(&sm1628_keypad_driver);
+	//printk(KERN_DEBUG "[VFD] %s\n", __func__);
+	
+	amlogic_gpio_free(LED_STB, __func__);
+	amlogic_gpio_free(LED_CLK, __func__);
+	amlogic_gpio_free(LED_DAT, __func__);
 	
-	platform_device_unregister(&sm1628_keypad_dev);
+	mutex_destroy(&mutex);
+	
+	platform_driver_unregister(&tm1628_driver);
+	platform_device_unregister(&tm1628_device);
 }
 
-module_init(gpio_init);
-module_exit(gpio_exit);
+module_init(tm1628_init);
+module_exit(tm1628_exit);
 MODULE_LICENSE("GPL");
-MODULE_AUTHOR("wkf29248 <wangjian97@huawei.com>");
-MODULE_DESCRIPTION("MV300 sm1628 keyboad driver");
-
-
+MODULE_AUTHOR("emanuel <emanuel@ihad.com>");
+MODULE_DESCRIPTION("tm1628 vfd driver");
diff -Nur linux-95ba9d626c0fce672caa296f5911ab9190881642-avl/drivers/amlogic/vfd.bak/venus_vfd.h linux-95ba9d626c0fce672caa296f5911ab9190881642-avl/drivers/amlogic/vfd/venus_vfd.h
--- linux-95ba9d626c0fce672caa296f5911ab9190881642-avl/drivers/amlogic/vfd.bak/venus_vfd.h	2018-03-21 06:58:27.000000000 +0100
+++ linux-95ba9d626c0fce672caa296f5911ab9190881642-avl/drivers/amlogic/vfd/venus_vfd.h	2019-03-03 02:25:46.665482349 +0100
@@ -1,62 +1,72 @@
-#ifndef _SM1828_H__
-#define _SM1828_H__
+#ifndef __VENUS_VFD_H
+#define __VENUS_VFD_H
 
-#ifdef _SM1828_H__
+#ifdef __VENUS_VFD_H
 
-//#include "hi_type.h"
-//#include "hi_gpio.h"
-//#include "hi_unf_ecs.h"
-//#include "hi_error_ecs.h"
-//#include "priv_keyled.h"
 #include <mach/gpio.h>
-#define SM1628_DISPLAY_REG_NUM  (14)
-/*sm1628 command*/
-#define CMD1_DISP_MODE_1   (0x3)  
+#include <linux/mutex.h>
+
+static struct mutex mutex;
+
+/*tm1628 command*/
+#define CMD1_DISP_MODE_1   (0x03)  
 #define CMD1_LED_ADDR_BASE (0xc0)
-#define CMD1_LED_WRITE_INC (0x40)
-#define CMD1_DIP_ON        (0x8a)
+#define CMD1_LED_ADDR_DIGIT_1 (0xc2)
+#define CMD1_LED_ADDR_DIGIT_2 (0xc4)
+#define CMD1_LED_ADDR_DIGIT_3 (0xc6)
+//#define CMD1_LED_WRITE_INC (0x40)
+//#define CMD1_DIP_ON        (0x8a)
 #define CMD1_DIP_OFF       (0x80)
 
-//#define GROUP   (5)
-//#define CLK     (2)
-//#define STB     (3)
-//#define DAT     (4)
-//#define LED     (5)
-//#define KEY     (6)
-#define LED_STB GPIOX_17
-#define LED_CLK GPIOX_18
-#define LED_DAT GPIOX_19
-
-#define HI_SM1628_MINOR  MISC_DYNAMIC_MINOR
-#define SM1628_LIGHT_OFF     	  		 _IO('S' , 0 )
-#define SM1628_LIGHT_ON_ZERO        		 _IO('S' , 1 )
-
-//#define  GPIO_CLOCK_SET(val)    hi_gpio_write_bit(GROUP, CLK, val)
-//#define  GPIO_DATA_SET(val)     hi_gpio_write_bit(GROUP, DAT, val)
-//#define  GPIO_STB_SET(val)      hi_gpio_write_bit(GROUP, STB, val)
-//#define  GPIO_LED_SET(val)      hi_gpio_write_bit(GROUP, LED, val)
-//#define  GPIO_KEY_GET(val)      hi_gpio_read_bit(GROUP, KEY, &val)
-#define  GPIO_CLOCK_SET(val)    gpio_set_value(LED_CLK,val)
-#define  GPIO_DATA_SET(val)      gpio_set_value(LED_DAT,val)
-#define  GPIO_STB_SET(val)        gpio_set_value(LED_STB,val)
-
-typedef   unsigned char    HI_U8;
-typedef   unsigned int     HI_U32;
-typedef   signed   int     HI_S32;
-#define   HI_SUCCESS          0
-
-HI_U8 v_LedCode[SM1628_DISPLAY_REG_NUM] = {0x1f};
-HI_U8 CHANGE_Code[7] = {0xff,0xff,0xff,0xff,0xff,0xff,0x00};
-static HI_U32 LedDigDisDot_sm1628[10]  = {0xbf, 0x86, 0xf3, 0xe7, 0xce, 0xed, 0xfd, 0x87, 0xff, 0xef};
-
-#define udelay_sm1628(x)  do{	HI_U8 s;	for(s = 0; s < x; s++);}while(0) 
-
-typedef struct zeko_time_s{
-        HI_U8 hour;
-        HI_U8 minute;
-        HI_U8 second;
-}ZEKO_TIME;
+#define LED_STB GPIOX_22
+#define LED_CLK GPIOX_23
+#define LED_DAT GPIOX_24
+
+#define TM1628_MINOR  MISC_DYNAMIC_MINOR
+
+#define TM1628_MAGIC	'S'
+#define TM1628_POWER	_IOW(TM1628_MAGIC , 0, int)
+#define TM1628_BRIGHT	_IOW(TM1628_MAGIC , 1, int)
+#define TM1628_MLINE	_IO(TM1628_MAGIC , 2)
+#define TM1628_MAXNR	3
 
+//#define  GPIO_KEY_GET(val)      hi_gpio_read_bit(GROUP, KEY, &val)
+#define  GPIO_CLK_SET(val)	gpio_set_value(LED_CLK,val)
+#define  GPIO_DATA_SET(val)	gpio_set_value(LED_DAT,val)
+#define  GPIO_STB_SET(val)	gpio_set_value(LED_STB,val)
+
+typedef   unsigned char    u_int8;
+
+#define   TM1628_SUCCESS          0
+
+#define tm1628_udelay(x)  do{	u_int8 s;	for(s = 0; s < x; s++);}while(0) 
+
+typedef struct tm1628_time_s{
+        u_int8 hour;
+        u_int8 minute;
+        u_int8 second;
+}TM1628_TIME;
+
+typedef struct tm1628_buff_s{
+        u_int8 digit_0;
+        u_int8 digit_1;
+        u_int8 digit_2;
+	u_int8 digit_3;
+	u_int8 dot;
+}TM1628_VFD;
+
+const u_int8 led_key[]={
+	0x5F,  //"0"
+	0x50,  //"1"
+	0x6D,  //"2"
+	0x79,  //"3"
+	0x72,  //"4"
+	0x3B,  //"5"
+	0x3f,  //"6"
+	0x51,  //"7"
+	0x7F,  //"8"
+	0x7B,  //"9"
+};
 
 #endif
 #endif
